{"name":"node-simple-chat","tagline":"  Simple chat créé avec Node.js et Socket.io","body":"# node-simple-chat\r\n\r\nAtelier organisé à [Norsys][1] ayant pour but de créer une application de chat avec gestion de plusieurs salles en utilisant Node.js et Socket.io.\r\n\r\n## 1. Hello Express!\r\nLa première étape consiste à installer Express.js globalement sur le système puis de s'en servir pour générer un squelette d'application Node.js.\r\n```\r\nnpm install -g express@3.4.8\r\nexpress simple-blog\r\ncd simple-blog\r\nnpm install\r\n```\r\n\r\nUne fois ceci fait il suffit de lancer la commande suivant pour démarrer un serveur:\r\n```\r\nnode app\r\n```\r\n\r\nPar défaut, Express est configuré pour utilisé le port 3000. L'application que vous venez de démarrer est accessible l'adresse suivante: [localhost:3000][2]\r\n\r\n### 1.1. Redémarrage automatique du serveur\r\nUn outil supplémentaire peut être installé pour surveiller tout changement dans les fichiers du projet et redémarrer automatiquement le serveur pour les appliquer.\r\n```\r\nnpm install -g nodemon\r\n```\r\n\r\nPour utiliser cet outil, il suffit de démarrer le serveur avec la ligne suivante:\r\n```\r\nnodemon app\r\n```\r\n\r\n### 1.2. Utilisez Express en mode statique\r\nPour cet atelier, nul besoin des fonctionalités complexes de template offertes par Express. Supprimez les lignes suivantes du code:\r\n```\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'jade');\r\n...\r\napp.use(app.router);\r\n...\r\napp.get('/', routes.index);\r\napp.get('/users', user.list);\r\n```\r\n\r\nCréez une page _index.html_ simple que vous mettrez dans le dossier _public_ de l'application.\r\n\r\n## 2. Connection au chat\r\nInstallez Socket.io comme indiqué dans [la documentation][3] et utilisez la section _Using with the Express 3 framework_ pour la configuration du serveur ainsi que du client. Notez que, pour ce qui est du client, le fichier _socket.io.js_ n'est pas copié manuellement mais mis à la disposition automatiquement par la bibliothèque.\r\n\r\nSocket.io offre plusieurs fonctionnalités utiles à cet atelier:\r\n- `socket.on(event, callback)`: écoute un évenement\r\n- `socket.emit(event, data, callback)`: envois un évenement au client si côté serveur et au serveur si côté client\r\n- `socket.broadcast.emit(event, data)`: envois un évenement à tous les clients enregistrés excepté celui actuellement traitée (utilisée côté serveur uniquement)\r\n\r\nPour cette première partie, nous allons simplement enregistrer les utilisateurs du chat auprés du serveur.\r\n\r\n1. __[Client]__ Créez un formulaire de connection au chat permettant à un utilisateur de saisir son pseudonyme.\r\n2. __[Client]__ Configurez la validation du formulaire pour envoyer au serveur un évenement `join` avec le pseudonyme de l'utilisateur en paramètre.\r\n3. __[Serveur]__ Réceptionnez l'évenement `join`, enregistrez le pseudonyme du client dans la socket et écrivez un log dans la console.\r\n\r\n## 3. Affichage des nouveaux arrivants\r\nLorsqu'un utilisateur se connecte, nous voulons envoyer un message à tous les autres utilisateurs pour l'annoncer.\r\n\r\n1. __[Serveur]__ Emettez un broadcast d'un évenement `join` lors d'une connection avec le pseudonyme de nouvel arrivant.\r\n2. __[Client]__ Ecoutez les évenements `join` et affichez sur la page _\"XYZ s'est connecté au chat\"_.\r\n3. __[Bonus Client]__ Affichez la liste des utilisateurs connectés au chat.\r\n\r\n### 3.5. Affichage des utilisateurs connectés\r\nAfin de rendre l'utilisation du chat plus agréable, nous voulons afficher et maintenir la liste des utilisateurs connectés.\r\n\r\n1. __[Client]__ Affichez la liste des utilisateurs connectés au chat\r\n2. __[Serveur]__ Ecoutez les évenement `disconnect` et émettez un broadcast pour annoncer qu'un utilisateur s'est déconnecté\r\n3. __[Bonus Client]__ Maintenez la liste des utilisateurs connectés à jour\r\n\r\n## 4. Envoi de message\r\nDéveloppons maintenant la fonctionalité principale du chat. La mise en place est très similaire à la fonctionalité de connection.\r\n\r\n1. __[Client]__ Créez un formulaire permettant d'envoyer un nouveau message. Configurez le pour emettre un évenement `text` avec le contenu du message puis affichez sur la page le message envoyé.\r\n2. __[Serveur]__ Ecoutez les messages envoyés par le client et les transmettez aux autres clients.\r\n2. __[Client]__ Ecoutez les messages des autres clients transmis par le serveur et affichez les sur la page.\r\n\r\n## 5. Création d'une chatroom\r\nAfin de discuter d'un sujet plus précis, nous voulons donner la possiblité aux clients de se connecter à une chatroom pour pouvoir discuter en plus petit commité.\r\n\r\n1. __[Client]__ Créez un autre formulaire permettant d'entrer le nom d'une chatroom à laquelle se joindre. Comme d'habitude, configurez le pour emettre un évenement pour le serveur.\r\n2. __[Serveur]__ Ecoutez le nouvel évenement créé et enregistrez l'information dans la socket du client. Emettez un évenement en broadcast à tous les autres clients connectés à la chatroom avec `socket.broadcast.to(room).emit()`.\r\n3. __[Client]__ Ecoutez les nouvelles arrivées sur la chatroom et affichez les.\r\n\r\n## 6. Envoi de message à une chatroom\r\nDernière étape, permettre l'échange de message sur une chatroom.\r\n\r\n1. __[Client]__ Envoyez un message avec le nom de la salle en paramètre.\r\n2. __[Serveur]__ Réceptionez les messages et transmettez les aux autres clients connectéés à la salle.\r\n3. __[Client]__ Réceptionnez les messages envoyés sur la salle et affichez les.\r\n\r\n[1]: http://www.norsys.fr/\r\n[2]: http://localhost:3000\r\n[3]: http://socket.io/#how-to-use\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}